tasks:
  - name: "test-atlas"
    exec_timeout_secs: 1800
    commands:
      - func: "start kms servers"
      - func: "run tests"
        vars:
          TESTS: "atlas"

  - name: "test-serverless"
    tags: ["serverless"]
    exec_timeout_secs: 10800
    patch_only: true
    commands:
      - func: "start kms servers"
      - func: "set aws temp creds"
      - func: "run serverless tests"

  - name: "test-serverless-proxy"
    tags: ["serverless"]
    exec_timeout_secs: 10800
    patch_only: true
    commands:
      - func: "start kms servers"
      - func: "set aws temp creds"
      - func: "run serverless tests"

  - name: "test-atlas-data-lake"
    commands:
      - command: ec2.assume_role
        params:
          role_arn: ${aws_test_secrets_role}
      - func: "bootstrap mongohoused"
      - func: "run atlas data lake test"

  - name: "run-benchmark"
    exec_timeout_secs: 3600
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          TOPOLOGY: "server"
          MONGODB_VERSION: "v6.0-perf"
      - func: "run benchmark"
      - command: shell.exec
        params:
          script: |
            # We use the requester expansion to determine whether the data is from a mainline evergreen run or not
            if [ "${requester}" == "commit" ]; then
              is_mainline=true
            else
              is_mainline=false
            fi

            # We parse the username out of the order_id as patches append that in and SPS does not need that information
            parsed_order_id=$(echo "${revision_order_id}" | awk -F'_' '{print $NF}')

            # Submit the performance data to the SPS endpoint
            response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X 'POST' \
              "https://performance-monitoring-api.corp.mongodb.com/raw_perf_results/cedar_report?project=${project_id}&version=${version_id}&variant=${build_variant}&order=$parsed_order_id&task_name=${task_name}&task_id=${task_id}&execution=${execution}&mainline=$is_mainline" \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d @src/benchmark/.phpbench/results.json)

            http_status=$(echo "$response" | grep "HTTP_STATUS" | awk -F':' '{print $2}')
            response_body=$(echo "$response" | sed '/HTTP_STATUS/d')

            # We want to throw an error if the data was not successfully submitted
            if [ "$http_status" -ne 200 ]; then
              echo "Error: Received HTTP status $http_status"
              echo "Response Body: $response_body"
              exit 1
            fi

            echo "Response Body: $response_body"
            echo "HTTP Status: $http_status"
